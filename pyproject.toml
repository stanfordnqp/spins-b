# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name="spins"
description="Photonic optimization library"
classifiers = [
	"Programming Language :: Python :: 3.7",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Operating System :: OS Independent",
]
version="0.2.0"
authors = [
    {name = "stanfordnqp", email = "stanfordnqp@mail.com"},
]
keywords = ["python"]
license = {file = "LICENSE"}
dependencies = [
    "xmltodict",
    "contours[shapely]",
    "dill",
    "flatdict",
    "gdspy>=1.4",
    "h5py",
    "jsonschema",
    "matplotlib",
    "numpy",
    "pandas",
    "pyyaml",
    "requests",
    "schematics",
    "scipy",
    "pydantic"
]
readme = "README.md"
requires-python = ">=3.7"

[project.optional-dependencies]
dev = [
    "autotyping",
    "black>=21",
    "doc8",
    "mypy",
    "pre-commit",
    "pylsp-mypy",
    "types-cachetools",
    "flake8",
    "flake8-bugbear",
    "ipykernel",
    "pytest",
    "pytest-cov",
    "pytest_regressions",
    "types-PyYAML",
    "xdoctest",
    "pyproject-flake8",
    "pytest-xdist",
    ]
docs = [
    "autodoc_pydantic",
    "docutils==0.17.1",
    "matplotlib",
    "myst-parser",
    "nbsphinx",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-book-theme==0.3.3",
    "sphinx-click",
    "sphinx-copybutton",
    "sphinx-markdown-tables==0.0.16",
    "sphinxcontrib-video",
    ]



[tool.setuptools.packages]
find = {}

# [project.scripts]
# spins = "spins.cli:cli"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''  # Specify the files/dirs that should be ignored by the black formatter
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | env
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["spins/"]
# addopts = --tb=no
addopts = '--tb=short'
python_files = ["spins/*.py", "tests/*.py"]
norecursedirs = ["extra/*.py"]

[tool.flake8]
max-line-length = 88
max-complexity = 57
select = ["B","C","E","F","W","T4","B9"]
ignore = [ "E501", "E503", "E722", "W503", "W503", "E203", "B950", "B305", "B018", "B902", "B020", "B905"]
extend-ignore = "RST303"

exclude = [
    ".git",
    "__pycache__",
    "lib",
    "docs/source/conf.py",
    "build",
    "dist",
    ".ipynb_checkpoints",
    ".tox",
    "extra",
    "deprecated",
    ".mypy_cache",
    "venv",
    "devsim"
    ]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = [
    "pyproject.toml:version",
]

[tool.mypy]
python_version = "3.10"
strict = true

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.isort]
multi_line_output = 3
line_length = 88
include_trailing_comma = true
# skip = "spins/__init__.py"

[tool.setuptools.package-data]
mypkg = ["*.csv", "*.yaml"]

[tool.pydocstyle]
inherit = false
match = "(?!test).*\\.py"
add-ignore = ["D100","D101","D102","D103","D104","D203","D405","D417"]
convention = "google"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B905",  # `zip()` without an explicit `strict=` parameter
    "C408",  # C408 Unnecessary `dict` call (rewrite as a literal)
]
